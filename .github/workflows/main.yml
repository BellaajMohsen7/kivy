name: Android Builds (Kivy → APK/AAB)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Set this to the directory that contains buildozer.spec
# Use "." if buildozer.spec is at the repo root
env:
  APP_DIR: "."

jobs:
  build-android-apk:
    name: Build Debug APK
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.APP_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate buildozer.spec (debug)
        run: |
          echo "Working directory: $PWD"
          find . -maxdepth 3 -name buildozer.spec -print || true

      - name: Ensure buildozer.spec exists
        run: |
          if [ ! -f buildozer.spec ]; then
            echo "ERROR: buildozer.spec not found in $PWD. Set APP_DIR to the folder containing buildozer.spec or commit it."
            exit 1
          fi

      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
            .gradle
            .android
          key: ${{ runner.os }}-buildozer-${{ hashFiles(format('{0}/buildozer.spec', env.APP_DIR), 'requirements.txt', 'pyproject.toml', 'Pipfile', 'Pipfile.lock', 'poetry.lock', 'setup.cfg', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-

      - name: Build debug APK with Buildozer (Docker)
        run: |
          mkdir -p .buildozer .gradle .android
          docker pull kivy/buildozer:latest
          docker run --rm \
            -e BUILDOZER_WARN_ON_ROOT=0 \
            -v "$PWD":/home/user/app \
            -v "$PWD/.buildozer":/home/user/.buildozer \
            -v "$PWD/.gradle":/home/user/.gradle \
            -v "$PWD/.android":/home/user/.android \
            kivy/buildozer:latest \
            buildozer -v android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ${{ env.APP_DIR }}/bin/*.apk
          if-no-files-found: error

  build-android-aab:
    name: Build Signed AAB (Release)
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.APP_DIR }}

    # Expose signing secrets to steps
    env:
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_ALIAS_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}

    steps:
      - name: No keystore provided — skipping AAB build
        if: ${{ env.ANDROID_KEYSTORE_BASE64 == '' }}
        run: |
          echo "ANDROID_KEYSTORE_BASE64 is not set. Skipping release AAB build."

      - name: Checkout
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        uses: actions/checkout@v4

      - name: Locate buildozer.spec (debug)
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "Working directory: $PWD"
          find . -maxdepth 3 -name buildozer.spec -print || true

      - name: Ensure buildozer.spec exists
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          if [ ! -f buildozer.spec ]; then
            echo "ERROR: buildozer.spec not found in $PWD. Set APP_DIR to the folder containing buildozer.spec or commit it."
            exit 1
          fi

      - name: Restore caches
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
            .gradle
            .android
          key: ${{ runner.os }}-buildozer-${{ hashFiles(format('{0}/buildozer.spec', env.APP_DIR), 'requirements.txt', 'pyproject.toml', 'Pipfile', 'Pipfile.lock', 'poetry.lock', 'setup.cfg', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-

      - name: Prepare signing keystore
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > my-release-key.jks

      - name: Configure buildozer.spec for release + AAB
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          sed -i 's/^# *android\.release_keystore_file.*/android.release_keystore_file = my-release-key.jks/' buildozer.spec || true
          sed -i "s/^# *android\.release_keystore_password.*/android.release_keystore_password = ${ANDROID_KEYSTORE_PASSWORD}/" buildozer.spec || true
          sed -i "s/^# *android\.release_key_alias.*/android.release_key_alias = ${ANDROID_KEY_ALIAS}/" buildozer.spec || true
          sed -i "s/^# *android\.release_key_password.*/android.release_key_password = ${ANDROID_KEY_ALIAS_PASSWORD}/" buildozer.spec || true

          if grep -q '^android.build_aab' buildozer.spec; then
            sed -i 's/^android\.build_aab.*/android.build_aab = True/' buildozer.spec
          else
            echo 'android.build_aab = True' >> buildozer.spec
          fi

      - name: Build signed AAB (Docker)
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          mkdir -p .buildozer .gradle .android
          docker pull kivy/buildozer:latest
          docker run --rm \
            -e BUILDOZER_WARN_ON_ROOT=0 \
            -v "$PWD":/home/user/app \
            -v "$PWD/.buildozer":/home/user/.buildozer \
            -v "$PWD/.gradle":/home/user/.gradle \
            -v "$PWD/.android":/home/user/.android \
            -w /home/user/app \
            kivy/buildozer:latest \
            bash -lc "buildozer -v android release"

      - name: Upload AAB artifact
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: ${{ env.APP_DIR }}/bin/*.aab
          if-no-files-found: error
